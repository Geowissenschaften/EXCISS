#!/bin/bash
###############################################################################
#
# SCU_boot
#
# Prepares and starts the SCU environment at system boot time.
#   1. Sets RTC of SCU to date read from MCU (RTC_date)
#   2. Start IO shutdown daemon (PI_shutdown_IO)
#   3. Perform software updates (SCU_update)
#   4. Launch SCU main mission (SCU_launch_mission)
# Executed from /etc/rc.local with (for SCU_HOME="/opt/MLU/SCU"):
#   # ---------------------------------------------------------------
#   # EXCISS MLU SCU modifications
#   # ---------------------------------------------------------------
#   /opt/MLU/SCU/bin/SCU_boot | tee -a /tmp/MLU_SCU_boot.log 2>&1
#   # ---------------------------------------------------------------
#
# Needs sudo (root) for kill, mkdir, chown, chmod - see ${CMD_PREFIX_SUDO}
# Redirects all stderr (2) to stdout (1) during execution - see exec (...)
#
# $LOCATION ${SCU_HOME}/bin
#
# $REQUIRES VARIABLE SCU_USER_GID
# $REQUIRES VARIABLE SCU_USER_UID
# $REQUIRES LIBRARY ${SCU_HOME}/lib/lib_MCU_message
# $REQUIRES LIBRARY ${SCU_HOME}/lib/lib_SCU_base
# $REQUIRES FILE ${SCU_HOME}/etc/SCU_env
# $REQUIRES FILE ${SCU_HOME}/bin/MLU_battery
# $REQUIRES FILE ${SCU_HOME}/bin/RTC_date
# $REQUIRES FILE ${SCU_HOME}/bin/SCU_update
# $REQUIRES FILE ${SCU_HOME}/bin/PI_shutdown_IO
# $REQUIRES FILE ${SCU_HOME}/bin/SCU_launch_mission
#
# $RETURNS 0 success
# $RETURNS 1 general error
# $RETURNS 2 invalid option or argument
# $RETURNS 3 failed to load environment
# $RETURNS 4 error performing requested task
#
# $COMPONENT_NAME MLU.SCU.SCU_boot
# $VERSION_NUMBER 0.6.2
# $VERSION_DATE 2018-09-08_23:59:00
#
# $TODO Copy logs to USB_X if exiting before science because of BATTERY_VOLTAGE
#
###############################################################################
# set -x
unalias -a

exec 3>&2 2>&1 # Back up stderr (2) to channel 3, then redirect 2 to stdout (1)

#------------------------------------------------------------------------------
# Define global environment variables
#------------------------------------------------------------------------------

MY_START_TIME="$(date +%Y-%m-%d_%H:%M:%S)" # current time early after start
MY_DIR_NAME="$(dirname $0)" # directory where this script is located
MY_FILE_NAME="$(basename $0)" # file name of this script (without path)
MY_BASE_NAME="$(basename ${MY_FILE_NAME} .sh)" # script name without ".sh"
MY_EXEC_USER="$(whoami 2>/dev/null)" # name of user who started this script
MY_PROCESS_ID="$(ps -fp $$ -o pid= | awk '{print $1}')" # PID of this script
MY_PARENT_ID="$(ps -fp $$ -o ppid= | awk '{print $1}')" # PID of parent process
MY_ARG_COUNT="$#" # number of parameters passed to this script
MY_ARG_LIST="$@" # list of all parameters passed to this script
WORK_DIR_NAME="$(pwd)" # current work directory of shell starting this script

typeset -i RETURN_CODE=0 # return code of previous command (0=success)
typeset -i MY_EXIT_RC=0 # return code of this script (0=success)
typeset -i OPT_EXCLUSIVE_COUNT=0 # counter for mutually exclusive options
typeset -i OPT_REQUIRED_COUNT=0 # counter for required options

F_LIB_SCU_BASE_REL="lib/lib_SCU_base" # library lib_SCU_base
F_LIB_MCU_MESSAGE_REL="lib/lib_MCU_message" # library lib_MCU_message
F_ETC_SCU_ENV_FILE_REL="etc/SCU_env" # SCU environment file
F_BIN_MLU_BATTERY_REL="bin/MLU_battery" # binary MLU_battery
F_BIN_PI_SHUTDOWN_IO_REL="bin/PI_shutdown_IO" # binary PI_shutdown_IO
F_BIN_RTC_DATE_REL="bin/RTC_date" # binary RTC_date
F_BIN_SCU_UPDATE_REL="bin/SCU_update" # binary SCU_update
F_BIN_SCU_LAUNCH_MISSION_REL="bin/SCU_launch_mission" # SCU_launch_mission

F_SCU_BOOT_LOG_REL="log/${MY_BASE_NAME}.log" # SCU_boot log file
SCU_BOOT_KEEPALIVE_DEFAULT=900 # default keepalive time is 900s (15m)
F_LIB_MCU_SERIAL_SEND_LOG_REL="log/lib_MCU_serial_send.log" # MCU UART log

#------------------------------------------------------------------------------
#
# Function f_Print_Help
#
# Shows the usage of this script.
# Usage: f_Print_Help
# Returns: 0 success
# StdOut: usage information
# StdErr: (none)
#------------------------------------------------------------------------------

function f_Print_Help {

	echo "Usage: ${MY_FILE_NAME} [-v][-V][-h]"
	echo "Starts the SCU environment at system boot time."
	echo "  1. Sets RTC of SCU to date read from MCU (RTC_date)"
	echo "  2. Start IO shutdown daemon (PI_shutdown_IO)"
	echo "  3. Perform software updates (SCU_update)"
	echo "  4. Launch SCU main mission (SCU_launch_mission)"
   echo
	echo "Executed from /etc/rc.local with (for SCU_HOME=\"/opt/MLU/SCU\"):"
	echo "  # ---------------------------------------------------------------"
	echo "  # EXCISS MLU SCU modifications"
	echo "  # ---------------------------------------------------------------"
	echo "  /opt/MLU/SCU/bin/SCU_boot | tee -a /tmp/MLU_SCU_boot.log 2>&1"
	echo "  # ---------------------------------------------------------------"
	echo
	echo "  -v     print verbose output"
	echo "  -V     print version of this script"
	echo "  -h     print this help message"
	echo
	echo "Example: ${MY_FILE_NAME}"

	return 0

}

#------------------------------------------------------------------------------
#
# Function f_Load_SCU_Env_Boot
#
# Loads the SCU environment with global variables and functions.
# Tries to determine SCU_HOME environment variable if not defined yet.
# Usage: f_Load_SCU_Env_Boot
# Returns: 0 success
# Returns: 1 variable $SCU_HOME is undefined
# Returns: 2 directory $SCU_HOME is invalid
# Returns: 3 failed to load SCU environment
# StdOut: (none)
# StdErr: error/debug information
#------------------------------------------------------------------------------

function f_Load_SCU_Env_Boot {

	if [[ "${SCU_HOME}" == "" ]]; then

		if "${OPTION_LOWER_V}"; then
			echo "Warning: \${SCU_HOME} not defined in environment!" >&2
		fi

		# Try SCU_HOME = upper directory of this script
		MY_TMP_SCU_HOME="${MY_DIR_NAME}/.." # [...]/bin/..

		if [[ -f "${MY_TMP_SCU_HOME}/${F_ETC_SCU_ENV_FILE_REL}" ]]; then

			# Found SCU_env file so this is a good candidate
			SCU_HOME="${MY_TMP_SCU_HOME}" # will be overwritten from SCU_env

		else

			# Try to find latest [...]/etc/SCU_env file in /
			F_ETC_SCU_ENV_FILE_NAME="$(basename F_ETC_SCU_ENV_FILE_REL)"
			SCU_HOME=$(find / -type f -name "${F_ETC_SCU_ENV_FILE_NAME}" \
				-printf "%TY%Tm%Td%TH%TM %p\n" 2>/dev/null | sort -rnk 1 | \
				grep "/" | awk '/\/etc\// {print $2}' | head -1)

		fi

		if [[ "${SCU_HOME}" == "" ]]; then
			echo "Temporarily setting Variable SCU_HOME=${SCU_HOME}" >&2
		fi

	fi

	if [[ "${SCU_HOME}" == "" ]]; then

		# All attempts to determine SCU_HOME failed
		echo "ERROR: Variable SCU_HOME can not be found or constructed!" >&2
		return 1

	else

		if [[ ! -e "${SCU_HOME}" ]]; then

			# SCU_HOME variable is incorrectly defined
			if "${OPTION_LOWER_V}"; then
				echo "ERROR: Directory SCU_HOME=${SCU_HOME} does not exist!" >&2
			fi
			return 2

		elif [[ ! -e "${SCU_HOME}/${F_LIB_SCU_BASE_REL}" ]]; then

			# SCU_HOME directory exists but is missing lib/lib_SCU_base
			if "${OPTION_LOWER_V}"; then
				echo "ERROR: SCU_HOME=${SCU_HOME} is not a valid SCU" \
					"installation!" >&2
			fi
			return 2

		else

			if "${OPTION_LOWER_V}"; then
				echo "Calling library function:" \
					"${SCU_HOME}/${F_LIB_SCU_BASE_REL} f_SCU_Load_Env" >&2
			fi

			export SCU_HOME # export current SCU_HOME for calls to libraries
			unset SCU_ENV_VERSION_NUMBER SCU_ENV_VERSION_DATE # clear variables
			. "${SCU_HOME}/${F_LIB_SCU_BASE_REL}" f_SCU_Load_Env # source SCU_env

			if [[ -n "${SCU_ENV_VERSION_NUMBER}" && \
					-n "${SCU_ENV_VERSION_DATE}" ]]; then

				if "${OPTION_LOWER_V}"; then
					echo "Successfully loaded SCU environment version:" \
						"${SCU_ENV_VERSION_NUMBER} (${SCU_ENV_VERSION_DATE})" >&2
					echo "Using SCU_HOME=${SCU_HOME}" >&2
					echo >&2
				fi
				return 0

			else

				if "${OPTION_LOWER_V}"; then
					echo "ERROR: Failed to load SCU environment in" \
						"SCU_HOME=${SCU_HOME}!" >&2
				fi
				return 3

			fi

		fi

	fi

}

#------------------------------------------------------------------------------
#
# Function f_SCU_boot_log_Header
#
# Prints the file header for new SCU_boot.log files.
# Usage: f_SCU_boot_log_Header
# Returns: 0 success
# StdOut: header of log file
# StdErr: (none)
#------------------------------------------------------------------------------

function f_SCU_boot_log_Header {

	MY_VERSION_NUMBER="$(awk '$1~/^#/ && $2~/^\$VERSION_NUMBER$/ \
		{print $3; exit}' ${MY_DIR_NAME}/${MY_FILE_NAME} 2>/dev/null)"
	MY_VERSION_DATE="$(awk '$1~/^#/ && $2~/^\$VERSION_DATE$/ \
		{print $3; exit}' ${MY_DIR_NAME}/${MY_FILE_NAME} 2>/dev/null)"

	if [[ "${MY_VERSION_NUMBER}" == "" ]]; then
		MY_VERSION_NUMBER="0.0.0"
	fi
	if [[ "${MY_VERSION_DATE}" == "" ]]; then
		MY_VERSION_DATE="1970-01-01_00:00:00"
	fi

	cat << 'EOF'
###############################################################################
#
# SCU_boot.log
#
# Logs executions of SCU_boot at system start.
#
# $LOCATION ${SCU_HOME}/log
#
# $REQUIRES {none}
#
# $RETURNS {none}
#
# $COMPONENT_NAME MLU.SCU.SCU_boot.log
EOF
echo "# \$VERSION_NUMBER ${MY_VERSION_NUMBER}"
echo "# \$VERSION_DATE ${MY_VERSION_DATE}"
	cat << 'EOF'
#
###############################################################################
EOF

	return 0

}

#------------------------------------------------------------------------------
# Parse command line parameters
#------------------------------------------------------------------------------

GETOPTS_OPTSTRING=":vVh" # needs to start with ':' for quiet mode

OPTION_LOWER_V=false
OPTION_UPPER_V=false
OPTION_LOWER_H=false

#
# Print help (-h|-?) and version (-V) on priority
# (will not work if given as an argument to an option requiring arguments)
#

OPTIND=1 # start with 1st command line parameter
while getopts "${GETOPTS_OPTSTRING}" CMD_OPTION; do
	case "${CMD_OPTION}" in
		"v")
			OPTION_LOWER_V=true
			;;
		"V")
			OPTION_UPPER_V=true
			;;
		"h")
			OPTION_LOWER_H=true
			;;
		"?")
			if [[ "${OPTARG}" == "?" ]]; then
				OPTION_LOWER_H=true
			fi
			;;
	esac
done

if "${OPTION_LOWER_H}"; then
	f_Print_Help
	exit 0
fi

if "${OPTION_UPPER_V}"; then
	MY_VERSION_NUMBER="$(awk '$1~/^#/ && $2~/^\$VERSION_NUMBER$/ \
		{print $3; exit}' ${MY_DIR_NAME}/${MY_FILE_NAME} 2>/dev/null)"
	MY_VERSION_DATE="$(awk '$1~/^#/ && $2~/^\$VERSION_DATE$/ \
		{print $3; exit}' ${MY_DIR_NAME}/${MY_FILE_NAME} 2>/dev/null)"
	if [[ -n "${MY_VERSION_NUMBER}" && -n "${MY_VERSION_DATE}" ]]; then
		echo "${MY_BASE_NAME} version ${MY_VERSION_NUMBER}" \
			"(${MY_VERSION_DATE})"
		exit 0
	else
		echo "ERROR: Can not find version information" \
			"for ${MY_BASE_NAME}!" >&2
		exit 1
	fi
fi

#
# Parse remaining command line options and arguments
#

OPTIND=1 # start with 1st command line parameter
while getopts "${GETOPTS_OPTSTRING}" CMD_OPTION; do
	case "${CMD_OPTION}" in
		"?")
			echo "ERROR: Invalid option -${OPTARG} specified!" >&2
			echo >&2
			f_Print_Help >&2
			exit 2
			;;
		":")
			echo "ERROR: Option -${OPTARG} requires an argument!" >&2
			echo >&2
			f_Print_Help >&2
			exit 2
			;;
	esac
done

#
# Parse trailing positional parameters
# ($OPTIND, $OPTIND+1, $OPTIND+2, ...)
#

POS_PARAM1="${@:$OPTIND:1}"
if [[ -n "${POS_PARAM1}" ]]; then
	# no positional parameter at all is expected
	echo "ERROR: Parameter ${POS_PARAM1} not expected!" >&2
	echo >&2
	f_Print_Help >&2
	exit 2
fi

#------------------------------------------------------------------------------
# Load SCU environment with global variables (e.g. DEBUG_LEVEL)
#------------------------------------------------------------------------------

f_Load_SCU_Env_Boot
RETURN_CODE=$?
if [[ ${RETURN_CODE} -gt 0 ]]; then
	echo "ERROR: Failed to initialize the SCU runtime environment!" >&2
	exit 3
fi

#
# Adjust DEBUG_LEVEL (set in SCU_env) if verbose option was specified
#

if "${OPTION_LOWER_V}"; then
	DEBUG_LEVEL=${DEBUG_LEVEL_DETAIL}
fi

#
# Print details of this process
#

if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	. "${SCU_HOME}/${F_LIB_SCU_BASE_REL}" f_SCU_Process_Info >&2 # source into
	echo >&2
fi

#
# Try to prepend 'sudo ' to commands requiring root privileges
#

if [[ "$(whoami)" != "root" ]]; then
	if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
		echo "Warning: Not started by root, using sudo" >&2
	fi
	CMD_PREFIX_SUDO="sudo "
else
	CMD_PREFIX_SUDO=""
fi

#------------------------------------------------------------------------------
# Initialize SCU_boot.log
#------------------------------------------------------------------------------

LOG_DIR="$(dirname ${SCU_HOME}/${F_SCU_BOOT_LOG_REL})"
LOG_FILE="${SCU_HOME}/${F_SCU_BOOT_LOG_REL}" # log/SCU_boot.log

if [[ ! -e "${LOG_DIR}" ]]; then
	# Create log directory if missing
	${CMD_PREFIX_SUDO}mkdir -p "${LOG_DIR}"
	${CMD_PREFIX_SUDO}chmod "0775" "${LOG_DIR}"
	${CMD_PREFIX_SUDO}chown "${SCU_USER_UID}:${SCU_USER_GID}" "${LOG_DIR}"
fi

if [[ -f "${LOG_FILE}" ]]; then
	# Create backup of existing log file
	cp -p "${LOG_FILE}" "${LOG_FILE}.OLD"
	${CMD_PREFIX_SUDO}chmod "0664" "${LOG_FILE}.OLD"
	${CMD_PREFIX_SUDO}chown "${SCU_USER_UID}:${SCU_USER_GID}" "${LOG_FILE}.OLD"
else
	# Initialize new log file by writing a file header
	f_SCU_boot_log_Header > "${LOG_FILE}"
	${CMD_PREFIX_SUDO}chmod "0664" "${LOG_FILE}"
	${CMD_PREFIX_SUDO}chown "${SCU_USER_UID}:${SCU_USER_GID}" "${LOG_FILE}"
fi

# Append current execution to log file
echo >> "${LOG_FILE}"
echo "# --------------------------------------------------" >> "${LOG_FILE}"
echo "# SCU Boot ${MY_START_TIME}" >> "${LOG_FILE}"
echo "# --------------------------------------------------" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"

# Add details of this process to the log file
. "${SCU_HOME}/${F_LIB_SCU_BASE_REL}" f_SCU_Process_Info >> "${LOG_FILE}"

if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "Log file: ${LOG_FILE}" >&2
fi

#------------------------------------------------------------------------------
# Perform main program
#------------------------------------------------------------------------------

#
# Initialize SCU boot environment
#

# Initialize UART fog file with non-root permissions
if [[ ! -f "${F_LIB_MCU_SERIAL_SEND_LOG_REL}" ]]; then
	${CMD_PREFIX_SUDO}touch "${F_LIB_MCU_SERIAL_SEND_LOG_REL}"
	${CMD_PREFIX_SUDO}chmod "0664" "${F_LIB_MCU_SERIAL_SEND_LOG_REL}"
	${CMD_PREFIX_SUDO}chown "${SCU_USER_UID}:${SCU_USER_GID}" \
		"${F_LIB_MCU_SERIAL_SEND_LOG_REL}"
fi

# Clear UART communication by sending 'nop' to MCU before first real command
echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Clearing UART communication by sending 'nop' to MCU" | tee -a "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
	Noop"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD} &"  >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1 &
sleep 3 # wait non-blocking for background job to complete

# Acknowledge SCU boot by sending UART command 'rom' to MCU first thing,
# otherwise MCU will will switch SD cards at next boot of SCU.
# Run in background so this script does not hang before SCU_update is called.
echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Acknowledging SCU boot by sending 'rom' to MCU" | tee -a "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
	Operation_Mode"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD} &"  >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1 &
sleep 3 # wait non-blocking for background job to complete

# Extend SCU keepalive time by sending UART command 'etk' to MCU,
# to reserve time for processing updates (can be re-set any time later).
# Run in background so this script does not hang before SCU_update is called.
echo >> "${LOG_FILE}"
if [[ ${SCU_BOOT_KEEPALIVE_TIME} -le 0 ]]; then
	# Variable SCU_BOOT_KEEPALIVE_TIME not exported in SCU_env
	SCU_BOOT_KEEPALIVE_TIME=${SCU_BOOT_KEEPALIVE_DEFAULT}
	if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
		echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
			"Variable SCU_BOOT_KEEPALIVE_TIME not set, defaulting to" \
			"${SCU_BOOT_KEEPALIVE_TIME}" >&2
	fi
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Warning" \
		"Variable SCU_BOOT_KEEPALIVE_TIME not set, defaulting to" \
		"${SCU_BOOT_KEEPALIVE_TIME}" >> "${LOG_FILE}"
fi
typeset -i SCU_BOOT_KEEPALIVE_TIME_M=${SCU_BOOT_KEEPALIVE_TIME}/60
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Setting SCU keepalive time to ${SCU_BOOT_KEEPALIVE_TIME}s" \
	"(${SCU_BOOT_KEEPALIVE_TIME_M}m)" | tee -a "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
	SCU_Keepalive ${SCU_BOOT_KEEPALIVE_TIME}"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD} &"  >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1 &
sleep 3 # wait non-blocking for background job to complete

# Request battery status for the log file
echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Requesting battery status for the log file" | tee -a "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
	rsg"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD} &"  >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1 &
sleep 3 # wait non-blocking for background job to complete

# Request capacitor status for the log file
echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Requesting capacitor status for the log file" | tee -a "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
	rsg"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD} &"  >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1 &
sleep 3 # wait non-blocking for background job to complete

#
# Set date of SCU to date read from MCU (RTC_date)
#

F_BIN_RTC_DATE_NAME="$(basename ${F_BIN_RTC_DATE_REL})"

echo
echo >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo "# Setting SCU clock from RTC" >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Setting clock from MCU with ${F_BIN_RTC_DATE_NAME}" | tee -a "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_BIN_RTC_DATE_REL} -u"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD} &" >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1 &
sleep 3 # wait non-blocking for background job to complete

#
# Start IO shutdown daemon (PI_shutdown_IO)
#

F_BIN_PI_SHUTDOWN_IO_NAME="$(basename ${F_BIN_PI_SHUTDOWN_IO_REL})"

echo
echo >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo "# Starting IO shutdown daemon" >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Starting daemon ${F_BIN_PI_SHUTDOWN_IO_NAME}" | tee -a "${LOG_FILE}"

# Kill any existing daemon before starting a new one
ps -eaf | egrep -v "ps -eaf|egrep|awk" | \
	awk -v CMD="${F_BIN_PI_SHUTDOWN_IO_NAME}" '$0~CMD {print $2}' | \
	while read PID; do
		echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
			"Killing existing PID ${PID}" | tee -a "${LOG_FILE}" >&2
		ps -up ${PID} >> "${LOG_FILE}"
		${CMD_PREFIX_SUDO}kill -9 ${PID} >> "${LOG_FILE}"
	done

EXEC_CMD="nohup ${SCU_HOME}/${F_BIN_PI_SHUTDOWN_IO_REL}"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD} &" >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1 &
sleep 2 # wait non-blocking for process to initialize

# Verify process is started
ps -eaf | egrep -v "ps -eaf|egrep|awk" | \
	awk -v CMD="${F_BIN_PI_SHUTDOWN_IO_NAME}" '$0~CMD {print $2}' | \
	while read PID; do
		if ps -hp ${PID} 2>/dev/null | grep -v "awk" >/dev/null; then
			echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
				"Script ${F_BIN_PI_SHUTDOWN_IO_NAME} running with PID ${PID}" | \
				tee -a "${LOG_FILE}" >&2
			ps -up ${PID} >> "${LOG_FILE}"
		fi
	done

#
# Perform software updates (SCU_update)
#

F_BIN_SCU_UPDATE_NAME="$(basename ${F_BIN_SCU_UPDATE_REL})"

echo
echo >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo "# Perform software updates" >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Performing updates with ${F_BIN_SCU_UPDATE_NAME}" | tee -a "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_BIN_SCU_UPDATE_REL}"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD}" >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1
RETURN_CODE=${PIPESTATUS[0]}

if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Return code: ${RETURN_CODE}" >&2
fi
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Return code: ${RETURN_CODE}" >> "${LOG_FILE}"

if [[ "${RETURN_CODE}" -eq 0 ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Successfully performed software update" | tee -a ${LOG_FILE} >&2
else
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} ERROR" \
	"Failed to perform software update" | tee -a ${LOG_FILE} >&2
	if [[ ${MY_EXIT_RC} -eq 0 ]]; then # only report first error
		MY_EXIT_RC=4
	fi
fi

#
# Start mission only if battery has a minimum voltage of 13.2V
#

if "${SCU_DEVELOPMENT_MODE}"; then
	# SCU development mode: ignore missing PSU (BATTERY_VOLTAGE="-1")
	BATTERY_VOLTAGE="${SCU_BOOT_MIN_BATTERY}" # set battery voltage to minimum
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
		"SCU Development mode: Setting battery voltage to ${BATTERY_VOLTAGE}" | \
		tee -a "${LOG_FILE}" >&2
else
	# Query current battery voltage from MCU
	BATTERY_VOLTAGE="$(${SCU_HOME}/${F_BIN_MLU_BATTERY_REL} -u 2>/dev/null)"
fi

if [[ "${BATTERY_VOLTAGE}" -lt "${SCU_BOOT_MIN_BATTERY}" ]]; then
	MY_EXIT_RC=4
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} ERROR" \
		"Battery voltage (${BATTERY_VOLTAGE}mV) is less than minimum voltage" \
		"(${SCU_BOOT_MIN_BATTERY}mV) required to start SCU" >> "${LOG_FILE}"

	# Set wakeup timer to 6h (21600s) to allow batteries to charge
	echo >> "${LOG_FILE}"
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
		"Setting wakeup timer to 6h (21600s)" | tee -a "${LOG_FILE}"

	EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
		SCU_Wakeup 21600"

	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
		"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
	if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
		echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
			"Executing command: ${EXEC_CMD} &"  >&2
	fi

	${EXEC_CMD} >>"${LOG_FILE}" 2>&1

	# Set keepalive timer to 3m to initiate shutdown of SCU
	echo >> "${LOG_FILE}"
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
		"Setting keepalive timer to 3m" | tee -a "${LOG_FILE}"

	EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
		SCU_Keepalive 180"

	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
		"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
	if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
		echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
			"Executing command: ${EXEC_CMD} &"  >&2
	fi

	${EXEC_CMD} >>"${LOG_FILE}" 2>&1

	echo >> "${LOG_FILE}"
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
		"${MY_FILE_NAME} terminating prematurely with return code" \
		"${MY_EXIT_RC}" >> "${LOG_FILE}"
	echo >> "${LOG_FILE}"

	exec 2>&3 3>&- # Restore stderr (2) from channel 3, then close channel 3

	exit ${MY_EXIT_RC}
fi

#
# Launch SCU main mission (SCU_launch_mission)
#

F_BIN_SCU_LAUNCH_MISSION_NAME="$(basename ${F_BIN_SCU_LAUNCH_MISSION_REL})"

echo
echo >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo "# Launch SCU main mission" >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Starting SCU main mission with ${F_BIN_SCU_LAUNCH_MISSION_NAME}" | \
	tee -a "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_BIN_SCU_LAUNCH_MISSION_REL}"

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD} &" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD}" >&2
fi

${EXEC_CMD} >>"${LOG_FILE}" 2>&1
RETURN_CODE=${PIPESTATUS[0]}

if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Return code: ${RETURN_CODE}" >&2
fi
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Return code: ${RETURN_CODE}" >> "${LOG_FILE}"

if [[ "${RETURN_CODE}" -eq 0 ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Successfully completed SCU main mission" | tee -a ${LOG_FILE} >&2
else
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} ERROR" \
	"Failed to complete SCU main mission" | tee -a ${LOG_FILE} >&2
	if [[ ${MY_EXIT_RC} -eq 0 ]]; then # only report first error
		MY_EXIT_RC=4
	fi
fi

echo >> "${LOG_FILE}"
echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"${MY_FILE_NAME} completed with return code ${MY_EXIT_RC}" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"

#
# Request shutdown of SCU from MCU
#

if "${SCU_DEVELOPMENT_MODE}"; then
	# SCU development mode: do not immediately shut down SCU (maximum keepalive)
	EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
		SCU_Keepalive 32767"
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
		"SCU development mode: Deactivating immediate shutdown of SCU" \
		"(keepalive=32767)" | tee -a ${LOG_FILE} >&2
else
	# Shut down SCU now via MCU keepalive (in 2m)
	EXEC_CMD="${SCU_HOME}/${F_LIB_MCU_MESSAGE_REL} f_MCU_send \
		SCU_Keepalive 120"
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
		"Shutting down SCU in 120s" \
		"(keepalive=120)" | tee -a ${LOG_FILE} >&2
fi

echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Info" \
	"Executing command: ${EXEC_CMD}" >> "${LOG_FILE}"
if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
		"Executing command: ${EXEC_CMD}"  >&2
fi

${EXEC_CMD} 2>&1 | tee -a "${LOG_FILE}"
RETURN_CODE=${PIPESTATUS[0]}

exec 2>&3 3>&- # Restore stderr (2) from channel 3, then close channel 3

exit ${MY_EXIT_RC}

###############################################################################
# EOF
###############################################################################


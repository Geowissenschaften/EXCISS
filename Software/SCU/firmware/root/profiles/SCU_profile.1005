###############################################################################
#
# SCU_Profile.1005
#
# Science experiment profile / technical test
#
# Test: Does a low energy arc free the electrodes from the olivine particles?
#
# DO NOT USE shebang (#!) IN LINE ONE OR 'exit' ANYWHERE IN THIS SCRIPT!
#
# $LOCATION ${SCU_HOME}/profiles
#
# $REQUIRES FILE ${SCU_HOME}/bin/MLU_camera
# $REQUIRES FILE ${SCU_HOME}/bin/MLU_capacitor
# $REQUIRES FILE ${SCU_HOME}/bin/MLU_ignition
# $REQUIRES FILE ${SCU_HOME}/bin/MLU_LED
# $REQUIRES LIBRARY ${SCU_HOME}/lib/lib_MCU_message
#
# $RETURNS {none}
#
# $COMPONENT_NAME MLU.SCU.SCU_Profile.1005
# $VERSION_NUMBER 0.6.4
# $VERSION_DATE 2018-12-10_02:20:20
#
###############################################################################

#
# Read last tested ignition voltage from config file (if present)
#
if [[ -r "${SCU_HOME}/var/MLU_science.cf" ]]; then

	typeset -i IGNITION_VOLTAGE_TESTED="$(awk -F "=" \
		'$1=="IGNITION_VOLTAGE_TESTED" {print $2}' \
		${SCU_HOME}/var/MLU_science.cf 2>/dev/null)"

	echo "Read from ${SCU_HOME}/var/MLU_science.cf:" \
		"IGNITION_VOLTAGE_TESTED=${IGNITION_VOLTAGE_TESTED}"

	IGNITION_VOLTAGE_SUCCESS="$(awk -F "=" \
		'$1=="IGNITION_VOLTAGE_SUCCESS" {print $2}' \
		${SCU_HOME}/var/MLU_science.cf 2>/dev/null)"

	echo "Read from ${SCU_HOME}/var/MLU_science.cf:" \
		"IGNITION_VOLTAGE_SUCCESS=${IGNITION_VOLTAGE_SUCCESS}"

else

	echo "ERROR: Config file ${SCU_HOME}/var/MLU_science.cf doesn't exist!"
	IGNITION_VOLTAGE_SUCCESS=false

fi

#
# Perform this profile only if IGNITION_VOLTAGE_TESTED was successfully tested
#

if ! ${IGNITION_VOLTAGE_SUCCESS}; then

	echo "Warning: Skipping profile, since ignition voltage is unconfirmed!"

else

	echo "Running profile with ignition voltage ${IGNITION_VOLTAGE_TESTED}V"

	#
	# Log temperatures reported by sensors
	#
	for TEMP_SENSOR in rst0 rst1 rst2 rst3 rst4 rst5 rst6 rst7 rst8 rst9 rst10 \
		rst11 rst12; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${TEMP_SENSOR}
	done

	#
	# Log Raspberry SoC (BCM2835) temperature
	#
	vcgencmd measure_temp

	#
	# Log PSU data (rsc: status charger, rsg: status gauge) from MCU
	#
	for MCU_REPORT in rsc rsg; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${MCU_REPORT}
	done

	#
	# Take one dark image
	#
	MLU_LED -a 0                                     # turn off back+front LED
	MLU_camera -s ImgCal_b0f0                        # take 1 still image

	#
	# Take one image with front light on only
	#
	MLU_LED -b 0                                     # turn off back LED
	MLU_LED -f 150                                   # turn on front LED at 150/255
	MLU_camera -s ImgCal_b0f150                      # take 1 still image

	#
	# Take one image with back light on only
	#
	MLU_LED -b 1                                     # turn on back LED at 1/255
	MLU_LED -f 0                                     # turn off front LED
	MLU_camera -s ImgCal_b1f0                        # take 1 still image

	#
	# Take one image with front and back light on
	#
	MLU_LED -b 1                                     # turn on back LED at 1/255
	MLU_LED -f 150                                   # turn on front LED at 150/255
	MLU_camera -s ImgCal_b1f150                      # take 1 still image

	echo
	echo "#------------------------------------------"
	echo "# Pre experiement end"
	echo "#------------------------------------------"
	echo

	#
	# Start video recording for 90s in background
	#
	MLU_camera -d Video_b1f150_0 -t 90 &             # record 90s video with '&'
	PID=$!                                           # take note of MLU_camera PID

	#
	# Charge capacitors to IGNITION_VOLTAGE_TESTED (in background via MCU)
	#
	MLU_capacitor -c ${IGNITION_VOLTAGE_TESTED}      # charge capacitors

	#
	# Wait for video to finish
	#
	wait $PID                                        # wait for PID of '&' job

	#
	# Wait for full charge of capacitors
	#
	MLU_capacitor -w                                 # wait for full charge

	#
	# Take one image
	#
	MLU_camera -s Image_b1f150                       # take 1 still image

	#
	# Start video recording for 90s in background
	#
	MLU_camera -d Video_b1f150_1 -t 90 &             # record 90s video with '&'
	PID=$!                                           # take note of MLU_camera PID

	#
	# Wait for 5s
	#
	sleep 5                                          # wait for 5s

	#
	# Vibration 1x 10s in background
	#
	MLU_shaker -s 10 -w 58_58_58_58_58_58_58_58 &    # shake for 10s
	PID2=$!                                          # take note of MLU_shaker PID

	#
	# Wait for 5s
	#
	sleep 5                                          # wait for 5s

	#
	# Perform ignition
	#
	MLU_ignition -i ${IGNITION_VOLTAGE_TESTED}       # ignition

	#
	# Wait for shaker to finish
	#
	wait $PID2                                       # wait for PID2 of '&' job

	#
	# Wait for video to finish
	#
	wait $PID                                        # wait for PID of '&' job

	#
	# Repeat 4x
	#
	for ((i=2;i<=5;i++)); do                         # repeat 4 times

		echo "Iteration: ${i}"

		#
		# Take one image
		#
		MLU_camera -s Image_b1f150               # take 1 still image

		#
		# Record video for 90s
		#
		MLU_camera -d Video_b1f150_${i} -t 90    # record 90s video

	done

	echo
	echo "#------------------------------------------"
	echo "# Post experiement Part 1 start"
	echo "#------------------------------------------"
	echo

	#
	# Take one image with front and back light on
	#
	MLU_LED -b 1                                     # turn on back LED at 1/255
	MLU_LED -f 150                                   # turn on front LED at 150/255
	MLU_camera -s ImgCal_b1f150                      # take 1 still image

	#
	# Take one image with front light on only
	#
	MLU_LED -b 0                                     # turn off back LED
	MLU_LED -f 150                                   # turn on front LED at 150/255
	MLU_camera -s ImgCal_b0f150                      # take 1 still image

	#
	# Take one image with back light on only
	#
	MLU_LED -b 1                                     # turn on back LED at 1/255
	MLU_LED -f 0                                     # turn off front LED
	MLU_camera -s ImgCal_b1f0                        # take 1 still image

	#
	# Take one dark image
	#
	MLU_LED -a 0                                     # turn off back+front LED
	MLU_camera -s ImgCal_b0f0                        # take 1 still image

	#
	# Log temperatures reported by sensors (debug)
	#
	for TEMP_SENSOR in rst0 rst1 rst2 rst3 rst4 rst5 rst6 rst7 rst8 rst9 rst10 \
		rst11 rst12; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${TEMP_SENSOR}
	done

	#
	# Log Raspberry SoC (BCM2835) temperature
	#
	vcgencmd measure_temp

	#
	# Log PSU data (rsc: status charger, rsg: status gauge) from MCU
	#
	for MCU_REPORT in rsc rsg; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${MCU_REPORT}
	done

	#
	# Generate checksums for video files
	#
	for VIDEO in Video_*.h264; do
		openssl dgst -md5 ${VIDEO} > $(basename ${VIDEO} .h264).md5
	done

	#
	# Log temperatures reported by sensors (debug)
	#
	for TEMP_SENSOR in rst0 rst1 rst2 rst3 rst4 rst5 rst6 rst7 rst8 rst9 rst10 \
		rst11 rst12; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${TEMP_SENSOR}
	done

	#
	# Log Raspberry SoC (BCM2835) temperature
	#
	vcgencmd measure_temp

	#
	# Log PSU data (rsc: status charger, rsg: status gauge) from MCU
	#
	for MCU_REPORT in rsc rsg; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${MCU_REPORT}
	done

	#
	# Wait for 1800s
	#
	sleep 1800                                       # wait for 30m

	echo
	echo "#------------------------------------------"
	echo "# Experiement part 2 - Fotos"
	echo "#------------------------------------------"
	echo

	#
	# Turn on fort+back LEDs
	#
	MLU_LED -b 1                                     # turn on back LED at 1/255
	MLU_LED -f 150                                   # turn on front LED at 150/255

	#
	# Start video recording for 60s in background
	#
	MLU_camera -d Video_b1f150_0 -t 60 &             # record 60s video with '&'
	PID=$!                                           # take note of MLU_camera PID

	#
	# Wait for 10s
	#
	sleep 10                                         # wait for 10s

	#
	# Vibration 1x 10s
	#
	MLU_shaker -s 10 -w 58_58_58_58_58_58_58_58      # shake for 10s

	#
	# Wait for 10s and perform test ignition (sparc without arc)
	#
	sleep 10                                         # wait for 10s
	MLU_ignition -t                                  # TEST ignition (no arc)

	#
	# Wait for video to finish
	#
	wait $PID                                        # wait for PID of '&' job

	#
	# Repeat 240x (1 picture every 15s)
	# taking a picture takes ~9s
	#
	for ((i=1;i<=240;i++)); do                       # repeat 240 times

		echo "Iteration: ${i}"

		#
		# Turn on front and back light
		#
		MLU_LED -b 1                             # turn on back LED at 1/255
		MLU_LED -f 150                           # turn on front LED at 150/255

		#
		# Take one bright image - high resolution (default)
		#
		MLU_camera -s Image_b1f150_${i}          # take 1 still image

		#
		# Turn off front and back light
		#
		MLU_LED -a 0                             # turn off back+front LED

		#
		# Wait for 6s
		#
		sleep 6                                  # wait for 6s

	done

	echo
	echo "#------------------------------------------"
	echo "# Post experiement start"
	echo "#------------------------------------------"
	echo

	#
	# Take one image with front and back light on
	#
	MLU_LED -b 1                                     # turn on back LED at 1/255
	MLU_LED -f 150                                   # turn on front LED at 150/255
	MLU_camera -s ImgCal_b1f150                      # take 1 still image

	#
	# Take one image with front light on only
	#
	MLU_LED -b 0                                     # turn off back LED
	MLU_LED -f 150                                   # turn on front LED at 150/255
	MLU_camera -s ImgCal_b0f150                      # take 1 still image

	#
	# Take one image with back light on only
	#
	MLU_LED -b 1                                     # turn on back LED at 1/255
	MLU_LED -f 0                                     # turn off front LED
	MLU_camera -s ImgCal_b1f0                        # take 1 still image

	#
	# Take one dark image
	#
	MLU_LED -a 0                                     # turn off back+front LED
	MLU_camera -s ImgCal_b0f0                        # take 1 still image

	#
	# Log temperatures reported by sensors
	#
	for TEMP_SENSOR in rst0 rst1 rst2 rst3 rst4 rst5 rst6 rst7 rst8 rst9 rst10 \
		rst11 rst12; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${TEMP_SENSOR}
	done

	#
	# Log Raspberry SoC (BCM2835) temperature
	#
	vcgencmd measure_temp

	#
	# Log PSU data (rsc: status charger, rsg: status gauge) from MCU
	#
	for MCU_REPORT in rsc rsg; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${MCU_REPORT}
	done

	#
	# Generate checksums for video files
	#
	for VIDEO in Video_*.h264; do
		openssl dgst -md5 ${VIDEO} > $(basename ${VIDEO} .h264).md5
	done

	#
	# Generate checksums for PNG images
	#
	for VIDEO in ImgCal_*.png Image_*.png; do
		openssl dgst -md5 ${VIDEO} > $(basename ${VIDEO} .png).md5
	done

	#
	# Generate checksums for JPG images
	#
	for VIDEO in ImgCal_*.jpg Image_*.png; do
		openssl dgst -md5 ${VIDEO} > $(basename ${VIDEO} .jpg).md5
	done

	#
	# Log temperatures reported by sensors
	#
	for TEMP_SENSOR in rst0 rst1 rst2 rst3 rst4 rst5 rst6 rst7 rst8 rst9 rst10 \
		rst11 rst12; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${TEMP_SENSOR}
	done

	#
	# Log Raspberry SoC (BCM2835) temperature
	#
	vcgencmd measure_temp

	#
	# Log PSU data (rsc: status charger, rsg: status gauge) from MCU
	#
	for MCU_REPORT in rsc rsg; do
		${SCU_HOME}/lib/lib_MCU_message f_MCU_send ${MCU_REPORT}
	done

fi

###############################################################################
# EOF
###############################################################################


#!/bin/bash
#
# lib_MCU_message
#
# Library containing MCU communications related functions
#
# $REQUIRES VARIABLE DEBUG_LEVEL
#
# UART commands
# https://github.com/exciss-space/EXCISS/wiki/UART
#
# Error correction
# https://en.wikipedia.org/wiki/Repetition_code
#
# $VERSION_NUMBER 0.6.0
# $VERSION_DATE 2018-08-21_23:55:00
#

MY_FILE_NAME="$(basename $0)" # file name of this script (without path)
MY_BASE_NAME="$(basename ${MY_FILE_NAME} .sh)" # script name without ".sh"
typeset -i MY_EXIT_RC=1 # return code of this script (0=success)(default=1)

SCU_HOME="/opt/MLU/SCU"
. "${SCU_HOME}/etc/SCU_env"
LIB_SERIAL_SEND_REL="lib/lib_MCU_serial_send"
#LIB_SERIAL_READ_REL="lib/lib_MCU_serial_read"

SERIAL_PORT_DEV="/dev/serial0"
#SERIAL_BAUD_RATE="9600"
SERIAL_BAUD_RATE="19200" # OLD: 9600

MCU_SERIAL_SEND="${SCU_HOME}/${LIB_SERIAL_SEND_REL}"
MCU_SERIAL_SEND="${MCU_SERIAL_SEND} -s ${SERIAL_PORT_DEV}"
MCU_SERIAL_SEND="${MCU_SERIAL_SEND} -b ${SERIAL_BAUD_RATE}"

F_LIB_MCU_SERIAL_SEND_LOG_REL="log/lib_MCU_serial_send.log" # MCU UART log

function f_MCU_send {

	#
	# f_MCU_send { MCU_Date | Operation_Mode | LED_Back {0..255} |
	#   LED_Front {0..255} | USB_A_Power {On|Off} | USB_B_Power {On|Off} |
	#   USB_X_Power {On|Off} | Shaker_Pattern <index> <effect> |
	#   Shaker_Power {On|Off} }
	#
	# See https://github.com/exciss-space/EXCISS/wiki/UART
	#
	# MCU_Date             rdt Current RTC date, Returns [YYYY-MM-DD HH:MM:SS]
	# TODO                 ris Ignition status, Returns {standby|charging|charged|failed}
	#                          Ignition capacitor voltage, Returns [V]
	# Operation_Mode       rom Operation mode, Returns {RECOVERY|SCIENCE}
	#                          Next data transfer, Returns [s]
	#                          VBU status, Returns {ONLINE|OFFLINE}
	# TODO                 rsc Read battery charger status, Returns data => Battery_Status
	# TODO                 rsg Read gauge status, Returns data => Gauge_Status
	# TODO                 rsl System status log, Returns data => System_Status
	# TODO                 rsp read status power (report)
	#									vsys = Science Power
	# TODO                 rst read status timer (report)
	#
	# TODO                 wdn set datetime now Str '2017_9_16_20_14_00'
	# TODO                 wdr set recovery datetime Str '2017_9_16_20_14_00'
	# LED_Back {0..255}    wlb {0..255} Backlight LED
	# LED_Front {0..255}   wlf {0..255} Frontlight LED
	# USB_A_Power {On|Off} wua usb a mass storage power 0 (Off) or 1 (On)
	# USB_B_Power {On|Off} wub usb b mass storage power 0 (Off) or 1 (On)
	# USB_X_Power {On|Off} wux usb x mass storage power 0 (Off) or 1 (On)
	# Science_Power        wps 	write power science 	0 (off) or 1 (on)
	# TODO                 wsd 	scu sd mass storage selection 	1 or 2
	# Shaker_Pattern <FF..>  wvs define vibration sequence
	#
	# Capacitor_Abort      eia abort charging -
	# HVU_Ignition {NNN|TEST} eii request ignition with target voltage int V
	#                      eit test ignition without arc 'TEST'
	# Capacitor_Charge [NNN] eiv arc cap charge target voltage int V
	#                      ris hvu_state = {standby|charging|charged|failed}
	# SCU_Keepalive NNN    etk SCU keepalive timer int sec {1..32767}
	# SCU_Wakeup NNN       etw SCU wakeup timer int sec
	# TODO                 eit 	test ignition without arc 	-
	# Shaker_Power {On|Off}  evg (start) | evs (stop) vibration motor (shaker)

#DEBUG_LEVEL=${DEBUG_LEVEL_INFO}

	if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
		echo "$(date +${DATE_FORMAT_SHORT}) ${MY_FILE_NAME} Debug" \
			"Function $(basename ${FUNCNAME[0]})" \
			"called by $(basename ${BASH_SOURCE[0]}) [${BASH_LINENO[0]}]" \
			"with parameters $@" >&2
	fi

	if [[ "$1" == "Capacitor_Abort" ]]; then

		# Function: MCU_Date
		# MCU UART command: eia
		# Returns: <none>

		MCU_COMMAND="eia"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	elif [[ "$1" == "Battery_Voltage" ]]; then

		# Function: Battery_Voltage
		# MCU UART command: rsg
		# Returns: none

		MCU_COMMAND="rsg"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
			awk -F "=" -v CMD="${MCU_COMMAND}" \
			'tolower($1) ~ /^[ \t]*voltage[ \t]*$/ \
			{gsub("^[ \t]+|[ \t]+$", "", $2); print tolower($2)}'

	elif [[ "$1" == "HVU_Ignition" ]]; then

		# Function: HVU_Ignition {NNN|TEST}
		# MCU UART command: eii|eit
		# Returns: none

		TARGET_VOLTAGE=$2
		if [[ "$(echo ${TARGET_VOLTAGE} | awk '/^[0-9]+$/ {print}')" == \
			"${TARGET_VOLTAGE}" ]]; then

			# TARGET_VOLTAGE is numeric, perform ignition
			MCU_COMMAND="eii${TARGET_VOLTAGE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "${TARGET_VOLTAGE}" == "TEST" ]]; then
			# perform test ignition (no arc)
			MCU_COMMAND="eit"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		fi
		sleep 1
		# return last ignition status (in any case)
		MCU_COMMAND="ris"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	elif [[ "$1" == "Capacitor_Charge" ]]; then

		# Function: Capacitor_Charge [NNN]
		# MCU UART command: eiv|ris
		# Returns: eiv => <none>
		# Returns: ris => {standby|charging|charged|failed} <Voltage>

		if [[ "$2" != "" ]]; then
			CAP_CHARGE_VOLTAGE="$2" # target voltage for charging capacitors
			MCU_COMMAND="eiv${CAP_CHARGE_VOLTAGE}" # arc cap charge target voltage
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		else
			MCU_COMMAND="ris" # ignition status
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
				awk -F "=" -v CMD="${MCU_COMMAND}" \
				'tolower($1) ~ /^[ \t]*hvu_state[ \t]*$/ \
				{gsub("^[ \t]+|[ \t]+$", "", $2); STATUS=tolower($2)} \
				tolower($1) ~ /^[ \t]*cap_voltage[ \t]*$/ \
				{gsub("^[ \t]+|[ \t]+$", "", $2); VOLTAGE=tolower($2)} \
				END {print STATUS" "VOLTAGE}'
		fi

	elif [[ "$1" == "MCU_Date" ]]; then

		# Function: MCU_Date
		# MCU UART command: rdt
		# Returns: Unix_Timestamp

		MCU_COMMAND="rdt"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
			awk -F "=" -v CMD="${MCU_COMMAND}" \
			'tolower($1) ~ /^[ \t]*current_unix_timestamp[ \t]*$/ \
			{gsub("^[ \t]+|[ \t]+$", "", $2); print tolower($2)}'

	elif [[ "$1" == "Next_Datatransfer" ]]; then

		# Function: Next_Datatransfer
		# MCU UART command: rom
		# Returns: time [s]

		MCU_COMMAND="rom"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
			awk -F "=" -v CMD="${MCU_COMMAND}" \
			'tolower($1) ~ /^[ \t]*next_datatransfer_seconds[ \t]*$/ \
			{gsub("^[ \t]+|[ \t]+$", "", $2); print tolower($2)}'

	elif [[ "$1" == "NOOP" ]]; then

		# Function: NOOP
		# MCU UART command: nop
		# Returns: <none>

		MCU_COMMAND="nop"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	elif [[ "$1" == "Operation_Mode" ]]; then

		# Function: Operation_Mode
		# MCU UART command: rom
		# Returns: {recovery|science}

		MCU_COMMAND="rom"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
			awk -F "=" -v CMD="${MCU_COMMAND}" \
			'tolower($1) ~ /^[ \t]*scu_mode[ \t]*$/ \
			{gsub("^[ \t]+|[ \t]+$", "", $2); print tolower($2)}'

	elif [[ "$1" == "SCU_Keepalive" ]]; then

		# Function: SCU_Keepalive Timeout
		# MCU UART command: etk
		# Returns: none

		KEEPALIVE_TIMEOUT=$2
		MCU_COMMAND="etk${KEEPALIVE_TIMEOUT}"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	elif [[ "$1" == "SCU_Wakeup" ]]; then

		# Function: SCU_Keepalive Delay
		# MCU UART command: etw
		# Returns: none

		WAKEUP_DELAY=$2
		MCU_COMMAND="etw${WAKEUP_DELAY}"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	elif [[ "$1" == "LED_Back" ]]; then

		# LED_Back {0..255}
		# wlb{0..255} (default: 0)

		LED_INTENSITY="$2" # {0..255}
		MCU_COMMAND="wlb${LED_INTENSITY}"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	elif [[ "$1" == "LED_Front" ]]; then

		# LED_Front {0..255}
		# wlf{0..255} (default: 0)

		LED_INTENSITY="$2" # {0..255}
		MCU_COMMAND="wlf${LED_INTENSITY}"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	elif [[ "$1" == "Science_Power" ]]; then

		# Science_Power {On|Off|Status}
		# wps{1|0} (system default: 0)
		# Returns: rsp => VSYS={on|off}

		if [[ "$2" == "On" ]]; then
			USB_POWER_STATE="1"
			MCU_COMMAND="wps${USB_POWER_STATE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "$2" == "Off" ]]; then
			USB_POWER_STATE="0"
			MCU_COMMAND="wps${USB_POWER_STATE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "$2" == "Status" ]]; then
			MCU_COMMAND="rsp"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
				awk -F "=" -v CMD="${MCU_COMMAND}" \
				'tolower($1) ~ /^[ \t]*vsys[ \t]*$/ \
				{gsub("^[ \t]+|[ \t]+$", "", $1); \
				gsub("^[ \t]+|[ \t]+$", "", $2); \
				print toupper($1)"="tolower($2)}'
		fi

	elif [[ "$1" == "USB_A_Power" ]]; then

		# USB_A_Power {On|Off|Status}
		# wua{1|0} (system default: 0)
		# rsp:{USB_A|USB_B|USB_X} => {on|off}

		if [[ "$2" == "On" ]]; then
			USB_POWER_STATE="1"
			MCU_COMMAND="wua${USB_POWER_STATE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "$2" == "Off" ]]; then
			USB_POWER_STATE="0"
			MCU_COMMAND="wua${USB_POWER_STATE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "$2" == "Status" ]]; then
			MCU_COMMAND="rsp"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
				awk -F "=" -v CMD="${MCU_COMMAND}" \
				'tolower($1) ~ /^[ \t]*usb_a[ \t]*$/ \
				{gsub("^[ \t]+|[ \t]+$", "", $1); \
				gsub("^[ \t]+|[ \t]+$", "", $2); \
				print toupper($1)"="tolower($2)}'
		fi

	elif [[ "$1" == "USB_B_Power" ]]; then

		# USB_B_Power {On|Off|Status}
		# wua{1|0} (system default: 0)
		# rsp:{USB_A|USB_B|USB_X} => {on|off}

		if [[ "$2" == "On" ]]; then
			USB_POWER_STATE="1"
			MCU_COMMAND="wub${USB_POWER_STATE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "$2" == "Off" ]]; then
			USB_POWER_STATE="0"
			MCU_COMMAND="wub${USB_POWER_STATE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "$2" == "Status" ]]; then
			MCU_COMMAND="rsp"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
				awk -F "=" -v CMD="${MCU_COMMAND}" \
				'tolower($1) ~ /^[ \t]*usb_b[ \t]*$/ \
				{gsub("^[ \t]+|[ \t]+$", "", $1); \
				gsub("^[ \t]+|[ \t]+$", "", $2); \
				print toupper($1)"="tolower($2)}'
		fi

	elif [[ "$1" == "USB_X_Power" ]]; then

		# USB_X_Power {On|Off|Status}
		# wua{1|0} (system default: 0)
		# rsp:{USB_A|USB_B|USB_X} => {on|off}

		if [[ "$2" == "On" ]]; then
			USB_POWER_STATE="1"
			MCU_COMMAND="wux${USB_POWER_STATE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "$2" == "Off" ]]; then
			USB_POWER_STATE="0"
			MCU_COMMAND="wux${USB_POWER_STATE}"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		elif [[ "$2" == "Status" ]]; then
			MCU_COMMAND="rsp"
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND} | \
				awk -F "=" -v CMD="${MCU_COMMAND}" \
				'tolower($1) ~ /^[ \t]*usb_x[ \t]*$/ \
				{gsub("^[ \t]+|[ \t]+$", "", $1); \
				gsub("^[ \t]+|[ \t]+$", "", $2); \
				print toupper($1)"="tolower($2)}'
		fi

	elif [[ "$1" == "Shaker_Pattern" ]]; then

		# Shaker_Pattern <FF_FF_FF_FF_FF_FF_FF_FF>
		# wvs<FF_FF_FF_FF_FF_FF_FF_FF>

		SHAKER_PATTERN="$2" # <FF_FF_FF_FF_FF_FF_FF_FF>
		MCU_COMMAND="wvs${SHAKER_PATTERN}"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	elif [[ "$1" == "Shaker_Power" ]]; then

		# Shaker_Power {On|Off}
		# {evg|evs} (system default: evs)

		if [[ "$2" == "On" ]]; then
			MCU_COMMAND="evg" # vibration motor go
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		else
			MCU_COMMAND="evs" # vibration motor stop
			${MCU_SERIAL_SEND} -c ${MCU_COMMAND}
		fi

	else

		# Unknown / custom command

		echo "Sending custom string to MCU: $@"
		MCU_COMMAND="$@"
		${MCU_SERIAL_SEND} -c ${MCU_COMMAND}

	fi

	MY_EXIT_RC=0
}

#
# Execute the function spcified as $1 with any arguments
#

if [[ "$(whoami)" != "root" ]]; then
	if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
		echo "Warning: Not started by root, using sudo" >&2
	fi
	CMD_PREFIX_SUDO="sudo "
else
	CMD_PREFIX_SUDO=""
fi

# Initialize UART fog file with non-root permissions
if [[ ! -f "${SCU_HOME}/${F_LIB_MCU_SERIAL_SEND_LOG_REL}" ]]; then
	${CMD_PREFIX_SUDO}touch "${SCU_HOME}/${F_LIB_MCU_SERIAL_SEND_LOG_REL}"
	${CMD_PREFIX_SUDO}chmod "0664" "${SCU_HOME}/${F_LIB_MCU_SERIAL_SEND_LOG_REL}"
	${CMD_PREFIX_SUDO}chown "${SCU_USER_UID}:${SCU_USER_GID}" \
		"${SCU_HOME}/${F_LIB_MCU_SERIAL_SEND_LOG_REL}"
fi

if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "Executing library function: ${MY_BASE_NAME}.$@" >&2
fi

if [[ "$1" == "f_MCU_send" ]]; then
	$@
fi

exit ${MY_EXIT_RC}

###############################################################################
# EOF
###############################################################################

